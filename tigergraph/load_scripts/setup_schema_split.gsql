/* 
*--split vertex type given in super class into subclass vertex:
*  1. split place vertex : into city, country, continent
*	place(PRIMARY_ID id INT, id UINT, name STRING, url STRING, types STRING)
*  into:  
*	city(PRIMARY_ID id INT, id UINT, name STRING, url STRING)
*	country(PRIMARY_ID id INT, id UINT, name STRING, url STRING)
*	continent(PRIMARY_ID id INT, id UINT, name STRING, url STRING)
*
*  2. split organisation vertex: into university, company
*	organisation(PRIMARY_ID id INT, id UINT, types STRING, name STRING, url STRING)
*  into:
*	company(PRIMARY_ID id INT, id UINT, name STRING, url STRING)
*	university(PRIMARY_ID id INT, id UINT, name STRING, url STRING)
*
*--split edges with vertex given in super class into edges with vertex in sub class
*  1. split place_isPartOf_place into city_isPartOf_country, country_isPartOf_continent
*	place_isPartOf_place (FROM place, TO place)
*  into:
*	city_isPartOf_country(FROM city, TO country)
*	country_isPartOf_continent(FROM country, TO continent)
*  2. person_isLocatedIn_place into person_isLocatedIn_city
*	person_isLocatedIn_place(FROM person, TO place)
*  into:
*	person_isLocatedIn_city(FROM person, TO city)
*  3. comments_isLocatedIn_place into comments_isLocatedIn_country
*	comments_isLocatedIn_place(FROM comments, TO place)
*  into:
*	comments_isLocatedIn_country(FROM comments, TO country)
*  4. post_isLocatedIn_place into post_isLocatedIn_country
*	post_isLocatedIn_place(FROM post, TO place)
*  into:
*	post_isLocatedIn_country(FROM post, TO country)
*  5. organisation_isLocatedIn_place into university_isLocatedIn_city, company_isLocatedIn_country
*	organisation_isLocatedIn_place(FROM organisation, TO place)
*  into:
*	university_isLocatedIn_city(FROM university, To city)
*	company_isLocatedIn_country(FROM company, To country)
*  6. person_studyAt_organisation into person_studyAt_university
*	person_studyAt_organisation (FROM person, TO organisation, classYear INT)
*  into:
*	person_studyAt_university (FROM person, TO university, classYear INT)
*  7. person_workAt_organisation into person_workAt_company
*	person_workAt_organisation (FROM person, TO organisation, workFrom INT)
*  into:
*	person_workAt_company (FROM person, TO company, workFrom INT)
*
*/

drop all

CREATE VERTEX person (PRIMARY_ID id INT, id UINT, firstName STRING, lastName STRING, gender STRING, birthday STRING, creationDate UINT, locationIP STRING, browserUsed STRING, email set<STRING>, speaks set<STRING>)
CREATE VERTEX tag(PRIMARY_ID id INT, id UINT, name STRING, url STRING)
CREATE VERTEX tagclass(PRIMARY_ID id INT, id UINT, name STRING,url STRING)
CREATE VERTEX comments(PRIMARY_ID id INT, id UINT, creationDate UINT, locationIP STRING, browserUsed STRING, content STRING, length UINT)
CREATE VERTEX post(PRIMARY_ID id INT, id UINT, imageFile STRING, creationDate UINT, locationIP STRING, browserUsed STRING, lang STRING, content STRING, length UINT) 
CREATE VERTEX forum(PRIMARY_ID id INT, id UINT, title STRING, creationDate UINT)

// CREATE VERTEX organisation(PRIMARY_ID id INT, id UINT, types STRING, name STRING, url STRING)
CREATE VERTEX company(PRIMARY_ID id INT, id UINT, types STRING, name STRING, url STRING)
CREATE VERTEX university(PRIMARY_ID id INT, id UINT, types STRING, name STRING, url STRING)
 
//CREATE VERTEX place (PRIMARY_ID id INT, id UINT, name STRING, url STRING, types STRING) 
CREATE VERTEX city(PRIMARY_ID id INT, id UINT, name STRING, url STRING, types STRING)
CREATE VERTEX country(PRIMARY_ID id INT, id UINT, name STRING, url STRING, types STRING)
CREATE VERTEX continent(PRIMARY_ID id INT, id UINT, name STRING, url STRING, types STRING)

//CREATE DIRECTED EDGE post_islocatedin_place (FROM messages, TO place) 
CREATE DIRECTED EDGE post_isLocatedIn_country(FROM post, TO country) WITH REVERSE_EDGE="post_isLocatedIn_country_reverse"
 
//CREATE DIRECTED EDGE comments_isLocatedIn_place (FROM messages, TO place)
CREATE DIRECTED EDGE comments_isLocatedIn_country(FROM comments, TO country) WITH REVERSE_EDGE="comments_isLocatedIn_country_reverse"

//CREATE DIRECTED EDGE organisation_isLocatedIn_place (FROM organisation, TO place)
CREATE DIRECTED EDGE university_isLocatedIn_city(FROM university, To city) WITH REVERSE_EDGE="university_isLocatedIn_city_reverse"
CREATE DIRECTED EDGE company_isLocatedIn_country(FROM company, To country) WITH REVERSE_EDGE="company_isLocatedIn_country_reverse"

//CREATE DIRECTED EDGE person_isLocatedIn_place (FROM person, TO place)
CREATE DIRECTED EDGE person_isLocatedIn_city(FROM person, TO city) WITH REVERSE_EDGE="person_isLocatedIn_city_reverse"

//CREATE DIRECTED EDGE person_studyAt_organisation (FROM person, TO organisation, classYear INT) 
CREATE DIRECTED EDGE person_studyAt_university (FROM person, TO university, classYear INT) WITH REVERSE_EDGE="person_studyAt_university_reverse"

//CREATE DIRECTED EDGE person_workAt_organisation (FROM person, TO organisation, workFrom INT)
CREATE DIRECTED EDGE person_workAt_company (FROM person, TO company, workFrom INT) WITH REVERSE_EDGE="person_workAt_company_reverse"

//CREATE DIRECTED EDGE place_isPartOf_place (FROM place, TO place)
CREATE DIRECTED EDGE city_isPartOf_country(FROM city, TO country) WITH REVERSE_EDGE="city_isPartOf_country_reverse"
CREATE DIRECTED EDGE country_isPartOf_continent(FROM country, TO continent) WITH REVERSE_EDGE="country_isPartOf_continent_reverse"


CREATE DIRECTED EDGE person_knows_person (FROM person, TO person, creationDate INT) WITH REVERSE_EDGE="person_knows_person_reverse"
CREATE DIRECTED EDGE comments_replyOf_post (FROM comments, TO post) WITH REVERSE_EDGE="comments_replyOf_post_reverse"
CREATE DIRECTED EDGE comments_replyOf_comments (FROM comments, TO comments) WITH REVERSE_EDGE="comments_replyOf_comments_reverse"
CREATE DIRECTED EDGE post_hasCreator_person (FROM post, TO person) WITH REVERSE_EDGE="post_hasCreator_person_reverse"
CREATE DIRECTED EDGE post_hasTag_tag (FROM post, TO tag) WITH REVERSE_EDGE="post_hasTag_tag_reverse"
CREATE DIRECTED EDGE comments_hasCreator_person (FROM comments, TO person) WITH REVERSE_EDGE="comments_hasCreator_person_reverse"
CREATE DIRECTED EDGE comments_hasTag_tag (FROM comments, TO tag) WITH REVERSE_EDGE="comments_hasTag_tag_reverse"
CREATE DIRECTED EDGE forum_containerOf_post (FROM forum, TO post) WITH REVERSE_EDGE="forum_containerOf_post_reverse"
CREATE DIRECTED EDGE forum_hasMember_person (FROM forum, TO person, joinDate INT) WITH REVERSE_EDGE="forum_hasMember_person_reverse"
CREATE DIRECTED EDGE forum_hasModerator_person (FROM forum, TO person) WITH REVERSE_EDGE="forum_hasModerator_person_reverse"
CREATE DIRECTED EDGE forum_hasTag_tag (FROM forum, TO tag) WITH REVERSE_EDGE="forum_hasTag_tag_reverse"
CREATE DIRECTED EDGE person_hasInterest_tag (FROM person, TO tag) WITH REVERSE_EDGE="person_hasInterest_tag_reverse"
CREATE DIRECTED EDGE person_likes_comments (FROM person, TO comments, creationDate INT) WITH REVERSE_EDGE="person_likes_comments_reverse"
CREATE DIRECTED EDGE person_likes_post (FROM person, TO post, creationDate INT) WITH REVERSE_EDGE="person_likes_post_reverse"
CREATE DIRECTED EDGE tag_hasType_tagclass (FROM tag, TO tagclass) WITH REVERSE_EDGE="tag_hasType_tagclass_reverse"
CREATE DIRECTED EDGE tagclass_isSubclassOf_tagclass (FROM tagclass, TO tagclass) WITH REVERSE_EDGE="tagclass_isSubclassOf_tagclass_reverse"
CREATE GRAPH ldbc (*)

use graph ldbc
CREATE LOADING JOB load_ldbc_edge for graph ldbc {
  #vertex folders
  DEFINE FILENAME person_file;
//  DEFINE FILENAME person_mail_file;
//  DEFINE FILENAME person_speak_file;
  DEFINE FILENAME post_file;
  DEFINE FILENAME tag_file;
  DEFINE FILENAME city_file;
  DEFINE FILENAME country_file;
  DEFINE FILENAME continent_file;
  DEFINE FILENAME comments_file;
  DEFINE FILENAME organisation_file;
  DEFINE FILENAME tagclass_file;
  DEFINE FILENAME forum_file;

  LOAD person_file
              TO VERTEX person VALUES ($0, $0, $1, $2, $3, $4, $5, $6, $7, _, _) USING header="true", separator="|";
//  LOAD person_mail_file
//              TO VERTEX person VALUES ($0, _, _, _, _, _, _, _, _, $1, _) USING header="true", separator="|";
//  LOAD person_speak_file
//              TO VERTEX person VALUES ($0, _, _, _, _, _, _, _, _, _, $1) USING header="true", separator="|";
  LOAD post_file
              TO VERTEX post VALUES ($0, $0, $1, $2, $3, $4, $5, $6, $7) USING header="true", separator="|";
  LOAD tag_file
              TO VERTEX tag VALUES ($0, $0, $1, $2) USING header="true", separator="|";
  LOAD city_file
              //TO VERTEX place VALUES ($0, $0, $1, $2, $3) USING header="true", separator="|";
              TO VERTEX city VALUES ($0, $0, $1, $2, $3) USING header="true", separator="|";
  LOAD country_file
              TO VERTEX country VALUES ($0, $0, $1, $2, $3) USING header="true", separator="|";
  LOAD continent_file
              TO VERTEX continent VALUES ($0, $0, $1, $2, $3) USING header="true", separator="|";
  LOAD comments_file 
              TO VERTEX comments VALUES ($0, $0, $1, $2, $3, $4, $5) USING header="true", separator="|";
  LOAD organisation_file
              //TO VERTEX organisation VALUES ($0, $0, $1, $2, $3) USING header="true", separator="|";
              TO VERTEX university VALUES ($0, $0, $1, $2, $3) WHERE $1=="university" USING header="true", separator="|";
  LOAD organisation_file
              TO VERTEX company VALUES ($0, $0, $1, $2, $3) WHERE $1=="company" USING header="true", separator="|";
  LOAD tagclass_file
              TO VERTEX tagclass VALUES ($0, $0, $1, $2) USING header="true", separator="|";
  LOAD forum_file
              TO VERTEX forum VALUES ($0, $0, $1, $2) USING header="true", separator="|";
}




  # edge folder starts 
CREATE LOADING JOB load_ldbc_person_knows_person for graph ldbc {
  DEFINE FILENAME person_knows_person_file;
  LOAD person_knows_person_file
              TO EDGE person_knows_person VALUES ($0, $1, $2) USING header="true", separator="|";
}
CREATE LOADING JOB load_ldbc_comments_replyOf_post for graph ldbc {
  DEFINE FILENAME comments_replyOf_post_file;
  LOAD comments_replyOf_post_file
              TO EDGE comments_replyOf_post VALUES ($0, $1) USING header="true", separator="|";
}
CREATE LOADING JOB load_ldbc_comments_replyOf_comments for graph ldbc {
  DEFINE FILENAME comments_replyOf_comments_file;
  LOAD comments_replyOf_comments_file
              TO EDGE comments_replyOf_comments VALUES ($0, $1) USING header="true", separator="|";
}
CREATE LOADING JOB load_ldbc_post_hasCreator_person for graph ldbc {
  DEFINE FILENAME post_hasCreator_person_file;
  LOAD post_hasCreator_person_file
              TO EDGE post_hasCreator_person VALUES ($0, $1) USING header="true", separator="|";

}
CREATE LOADING JOB load_ldbc_post_hasTag_tag for graph ldbc {
  DEFINE FILENAME post_hasTag_tag_file;
  LOAD post_hasTag_tag_file
              TO EDGE post_hasTag_tag VALUES ($0, $1) USING header="true", separator="|";
}

CREATE LOADING JOB load_ldbc_comments_hasCreator_person for graph ldbc {
  DEFINE FILENAME comments_hasCreator_person_file;
  LOAD comments_hasCreator_person_file
              TO EDGE comments_hasCreator_person VALUES ($0, $1) USING header="true", separator="|";

}

CREATE LOADING JOB load_ldbc_post_isLocatedIn_country for graph ldbc {
  DEFINE FILENAME post_isLocatedIn_place_file;
  LOAD post_isLocatedIn_place_file
              //TO EDGE post_isLocatedIn_place VALUES ($0, $1) USING header="true", separator="|";
              TO EDGE post_isLocatedIn_country VALUES ($0, $1) USING header="true", separator="|";

}

CREATE LOADING JOB load_ldbc_comments_hasTag_tag for graph ldbc {
  DEFINE FILENAME comments_hasTag_tag_file;
  LOAD comments_hasTag_tag_file
              TO EDGE comments_hasTag_tag VALUES ($0, $1) USING header="true", separator="|";
}

CREATE LOADING JOB load_ldbc_comments_isLocatedIn_country for graph ldbc {
  DEFINE FILENAME comments_isLocatedIn_place_file;
  LOAD comments_isLocatedIn_place_file
              //TO EDGE comments_isLocatedIn_place VALUES ($0, $1) USING header="true", separator="|";
              TO EDGE comments_isLocatedIn_country VALUES ($0, $1) USING header="true", separator="|";

}

CREATE LOADING JOB load_ldbc_forum_containerOf_post for graph ldbc {
  DEFINE FILENAME forum_containerOf_post_file;
  LOAD forum_containerOf_post_file
              TO EDGE forum_containerOf_post VALUES ($0, $1) USING header="true", separator="|";

}

CREATE LOADING JOB load_ldbc_forum_hasMember_person for graph ldbc {
  DEFINE FILENAME forum_hasMember_person_file;
  LOAD forum_hasMember_person_file
              TO EDGE forum_hasMember_person VALUES ($0, $1, $2) USING header="true", separator="|";
}

CREATE LOADING JOB load_ldbc_forum_hasModerator_person for graph ldbc {
  DEFINE FILENAME forum_hasModerator_person_file;
  LOAD forum_hasModerator_person_file
              TO EDGE forum_hasModerator_person VALUES ($0, $1) USING header="true", separator="|";

}

CREATE LOADING JOB load_ldbc_forum_hasTag_tag for graph ldbc {
  DEFINE FILENAME forum_hasTag_tag_file;
  LOAD forum_hasTag_tag_file
              TO EDGE forum_hasTag_tag VALUES ($0, $1) USING header="true", separator="|";

}

CREATE LOADING JOB load_ldbc_university_isLocatedIn_city for graph ldbc {
  DEFINE FILENAME university_isLocatedIn_city_file;
  LOAD university_isLocatedIn_city_file
              //TO EDGE organisation_isLocatedIn_place VALUES ($0, $1) USING header="true", separator="|";
              TO EDGE university_isLocatedIn_city VALUES ($0, $1) USING header="true", separator="|";

}

CREATE LOADING JOB load_ldbc_company_isLocatedIn_country for graph ldbc {
  DEFINE FILENAME company_isLocatedIn_country_file;
  LOAD company_isLocatedIn_country_file
              TO EDGE company_isLocatedIn_country VALUES ($0, $1) USING header="true", separator="|";

}

CREATE LOADING JOB load_ldbc_person_hasInterest_tag for graph ldbc {
  DEFINE FILENAME person_hasInterest_tag_file;
  LOAD person_hasInterest_tag_file
              TO EDGE person_hasInterest_tag VALUES ($0, $1) USING header="true", separator="|";

}

CREATE LOADING JOB load_ldbc_person_isLocatedIn_city for graph ldbc {
  DEFINE FILENAME person_isLocatedIn_place_file;
  LOAD person_isLocatedIn_place_file
              // TO EDGE person_isLocatedIn_place VALUES ($0, $1) USING header="true", separator="|";
              TO EDGE person_isLocatedIn_city VALUES ($0, $1) USING header="true", separator="|";

}

CREATE LOADING JOB load_ldbc_person_likes_comments for graph ldbc {
  DEFINE FILENAME person_likes_comments_file;
  LOAD person_likes_comments_file
              TO EDGE person_likes_comments VALUES ($0, $1, $2) USING header="true", separator="|";
}

CREATE LOADING JOB load_ldbc_person_likes_post for graph ldbc {
  DEFINE FILENAME person_likes_post_file;
  LOAD person_likes_post_file
              TO EDGE person_likes_post VALUES ($0, $1, $2) USING header="true", separator="|";

}

CREATE LOADING JOB load_ldbc_person_studyAt_university for graph ldbc {
  DEFINE FILENAME person_studyAt_organisation_file;
  LOAD person_studyAt_organisation_file
              //TO EDGE person_studyAt_organisation VALUES ($0, $1, $2) USING header="true", separator="|";
              TO EDGE person_studyAt_university VALUES ($0, $1, $2) USING header="true", separator="|";

}

CREATE LOADING JOB load_ldbc_person_workAt_company for graph ldbc {
  DEFINE FILENAME person_workAt_organisation_file;
  LOAD person_workAt_organisation_file
              //TO EDGE person_workAt_organisation VALUES ($0, $1, $2) USING header="true", separator="|";
              TO EDGE person_workAt_company VALUES ($0, $1, $2) USING header="true", separator="|";

}

CREATE LOADING JOB load_ldbc_city_isPartOf_country for graph ldbc {
  DEFINE FILENAME city_isPartOf_country_file;
  LOAD city_isPartOf_country_file
              //TO EDGE place_isPartOf_place VALUES ($0, $1) USING header="true", separator="|";
              TO EDGE city_isPartOf_country VALUES ($0, $1) USING header="true", separator="|";

}

CREATE LOADING JOB load_ldbc_country_isPartOf_continent for graph ldbc {
  DEFINE FILENAME country_isPartOf_continent_file;
  LOAD country_isPartOf_continent_file
              TO EDGE country_isPartOf_continent VALUES ($0, $1) USING header="true", separator="|";
}

CREATE LOADING JOB load_ldbc_tag_hasType_tagclass for graph ldbc {

  DEFINE FILENAME tag_hasType_tagclass_file;
  LOAD tag_hasType_tagclass_file
              TO EDGE tag_hasType_tagclass VALUES ($0, $1) USING header="true", separator="|";

}

CREATE LOADING JOB load_ldbc_tagclass_isSubclassOf_tagclass for graph ldbc {
  DEFINE FILENAME tagclass_isSubclassOf_tagclass_file;
  LOAD tagclass_isSubclassOf_tagclass_file
              TO EDGE tagclass_isSubclassOf_tagclass VALUES ($0, $1) USING header="true", separator="|";

}
